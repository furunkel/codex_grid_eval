
def fibonacci(lst):
    """
    Given a list of tuples, write a function that returns the last value of the tuple with the smallest third value.
    """
    lst = sorted(lst)
    return lst[-1][2]

# Test Cases
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11)]) == 8
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21)]) == 11
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4)]) == 25
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9)]) == 37
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13)]) == 41
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25)]) == 54
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25), (67, 53)]) == 67
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25), (67, 53), (81, 83)]) == 81
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25), (67, 53), (81, 83), (97, 103)]) == 97
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25), (67, 53), (81, 83), (97, 103), (126, 131)]) == 126
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25), (67, 53), (81, 83), (97, 103), (126, 131), (145, 153)]) == 145
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13), (54, 25), (67, 53), (81, 83), (97, 103), (126, 131), (145, 153), (172, 181)]) == 172
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (25, 4), (37, 9), (41, 13