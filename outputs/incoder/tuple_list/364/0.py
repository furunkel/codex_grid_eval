
def fibonacci(lst):
    """
    Given a list of tuples, write a function that returns the last value of the tuple with the smallest first value.
    """
    lst = sorted(lst)
    return lst[-1][1]

# Test Cases
assert fibonacci([(1, 2), (2, 3), (3, 5)]) == 5
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8)]) == 8
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13)]) == 13
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34)]) == 34
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55)]) == 55
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89)]) == 89
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130)]) == 130
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 162)]) == 162
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 162), (12, 233)]) == 233
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 162), (12, 233), (13, 377)]) == 377
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 162), (12, 233), (13, 377), (14, 535)]) == 535
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 162), (12, 233), (13, 377), (14, 535), (15, 811)]) == 811
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 162), (12, 233), (13, 377), (14, 535), (15, 811), (16, 1376)]) == 1376
assert fi