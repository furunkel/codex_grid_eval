
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the last value of the tuple with the smallest twelfth value.
    """
    return min(lst)[1]

# Test Cases
assert min_max([(5,3), (6,4), (7,5), (8,6)]) == 6
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7)]) == 7
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8)]) == 8
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9)]) == 9
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10)]) == 10
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11)]) == 11
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12)]) == 12
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (15,13)]) == 13
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (15,13), (16,14)]) == 14
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (15,13), (16,14), (17,15)]) == 15
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (15,13), (16,14), (17,15), (18,16)]) == 16
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (15,13), (16,14), (17,15), (18,16), (19,17)]) == 17
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (15,13), (16,14), (17,15), (18,16), (19,17), (20,18)]) == 18
assert min_max([(5,3), (6,4), (7,5), (8,6), (9,7), (10,8), (11,9), (12,10), (13,11), (14,12), (