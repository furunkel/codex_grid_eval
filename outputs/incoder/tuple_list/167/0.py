
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the third value of the tuple with the largest second value.
    """
    return max(lst, key=lambda x:x[1])[2]

# Test Cases
assert min_max([(4,5), (2,3), (1,4), (5,6)]) == 5
assert min_max([(4,5), (2,3), (1,4), (5,6), (1,4)]) == 4
assert min_max([(4,5), (2,3), (1,4), (5,6), (1,4), (1,4)]) == 4
assert min_max([(4,5), (2,3), (1,4), (5,6), (1,4), (1,4), (1,4)]) == 4
assert min_max([(4,5), (2,3), (1,4), (5,6), (1,4), (1,4), (1,4), (1,4), (1,4)]) == 4
assert min_max([(4,5), (2,3), (1,4), (5,6), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4)]) == 4
assert min_max([(4,5), (2,3), (1,4), (5,6), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4), (1,4