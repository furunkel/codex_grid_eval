
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the second value of the tuple with the smallest third value.
    """
    return min(lst, key=lambda x:x[2])[1]

# Test Cases
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9), (11, 'i', 10)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9), (11, 'i', 10), (12, 'j', 11)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9), (11, 'i', 10), (12, 'j', 11), (13, 'k', 12)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9), (11, 'i', 10), (12, 'j', 11), (13, 'k', 12), (14, 'l', 13)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9), (11, 'i', 10), (12, 'j', 11), (13, 'k', 12), (14, 'l', 13), (15, 'm', 14)]))
print(min_max([(3, 'a', 2), (4, 'b', 3), (5, 'c', 4), (6, 'd', 5), (7, 'e', 6), (8, 'f', 7), (9, 'g', 8), (10, 'h', 9), (