
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the first value of the tuple with the largest last value.
    """
    return max(lst)[1]

# Test Cases
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6)]) == 5
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5)]) == 5
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6)]) == 6
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5)]) == 6
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6)]) == 6
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5)]) == 6
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6)]) == 6
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6)]) == 6
assert min_max([(7, 3), (5, 4), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (2, 6), (3, 5), (