
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.
    """
    return max(lst, key=lambda x:x[1])

# Test Cases
assert min_max([(3,1), (5,2), (4,3)])==(5,2)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9)]) == (9,8)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10)]) == (11,10)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11)]) == (12,11)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12)]) == (13,12)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,13)]) == (14,13)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,13), (15,14)]) == (15,14)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,13), (15,14), (16,15)]) == (16,15)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,13), (15,14), (16,15), (17,16)]) == (17,16)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,13), (15,14), (16,15), (17,16), (18,17)]) == (18,17)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,13), (15,14), (16,15), (17,16), (18,17), (19,18)]) == (19,18)
assert min_max([(3,1), (5,2), (4,3), (6,5), (7,6), (8,7), (9,8), (10,9), (11,10), (12,11), (13,12), (14,