
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the eleventh value of the tuple with the largest eleventh value.
    """
    return max(lst)[1]

# Test Cases
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 1)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 2)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), (1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14)]))
print(min_max([(7, 2), (3, 1), (6, 1), (5, 1), (4, 1), (2, 1), 