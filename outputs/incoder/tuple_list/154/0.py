
def fibonacci(lst):
    """
    Given a list of tuples, write a function that returns the third value of the tuple with the largest first value.
    """
    lst = sorted(lst)
    return lst[2][1]

# Test Cases
assert fibonacci([(1, 2), (3, 5), (5, 8)]) == 8
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11)]) == 11
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53)]) == 53
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100)]) == 100
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143)]) == 143
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 189)]) == 189
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 189), (210, 233)]) == 233
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 189), (210, 233), (274, 305)]) == 305
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 189), (210, 233), (274, 305), (337, 370)]) == 370
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 189), (210, 233), (274, 305), (337, 370), (419, 466)]) == 466
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 189), (210, 233), (274, 305), (337, 370), (419, 466), (513, 561)]) == 561
assert fibonacci([(1, 2), (3, 5), (5, 8), (7, 11), (13, 21), (35, 53), (65, 77), (89, 100), (121, 143), (165, 