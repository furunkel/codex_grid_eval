
def f(lst):
    """
    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.
    """
    return max(lst, key=lambda t: t[1])[0]


# TESTS
def test_max():
    assert f([]) == []
    assert f(()) == ()
    assert f(()) == ()
    assert f([(1, 2), (3, 4)]) == 3
    assert f([(1, 2), (3, 4)]) == 3
    assert f([(1, 2), (3, 4), (5, 6)]) == 5
    assert f([(1, 2), (3, 4), (5, 6)]) == 5
    assert f([(1, 2), (3, 4), (5, 6), (7, 8)]) == 7
    assert f([(1, 2), (3, 4), (5, 6), (7, 8)]) == 7
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 10
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 10
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 12
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 12
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]) == 14
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]) == 14
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 16
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 16
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]) == 18
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]) == 18
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]) == 20
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]) == 20
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22)]) == 22
    assert f([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22)]) == 22
    assert f([(1, 2), (3, 4