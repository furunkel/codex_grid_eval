
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the first value of the tuple with the smallest first value.
    """
    return min(lst)

# Test Cases
assert min_max([(3,4), (5,6), (7,8), (9,10)]) == (3,4)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30), (31,32)]) == (11,12)
assert min_max([(3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30), (31,32), (33,34)]