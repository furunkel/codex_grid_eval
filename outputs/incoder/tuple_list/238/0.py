
def fibonacci(lst):
    """
    Given a list of tuples, write a function that returns the twelfth value of the tuple with the largest second value.
    """
    lst = sorted(lst)
    return lst[-2][1]

# Test Cases
assert fibonacci([(1, 2), (2, 3), (3, 5)]) == 5
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8)]) == 8
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13)]) == 13
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21)]) == 21
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34)]) == 34
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55)]) == 55
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89)]) == 89
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130)]) == 130
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 21)]) == 21
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 21), (12, 34)]) == 34
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 21), (12, 34), (13, 55)]) == 55
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 21), (12, 34), (13, 55), (14, 89)]) == 89
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 21), (12, 34), (13, 55), (14, 89), (15, 130)]) == 130
assert fibonacci([(1, 2), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55), (9, 89), (10, 130), (11, 2