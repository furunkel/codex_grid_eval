
def min_max(lst):
    """
    Given a list of tuples, write a function that returns the last value of the tuple with the smallest first value.
    """
    return min(lst)[1]

# Test Cases
assert min_max([(1, 2), (3, 4)])  == 3
assert min_max([(2, 3), (4, 5)])  == 4
assert min_max([(1, 2), (3, 4), (1, 3)])  == 1
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3)])  == 2
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4)])  == 3
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3)])  == 1
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3)])  == 2
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 3
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3)])  == 1
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 2
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3)])  == 3
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 1
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 2
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 3
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 1
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4)])  == 2
assert min_max([(1, 2), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), (1, 3), (2, 3), (3, 4), 