def rolling_min(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling minimum element found until given moment
    in the sequence.
    >>> rolling_min([434839248, 43, 43948294823948932489324839483924, 138193819389123891238193193893893821938921, -54378957489578927489327489])
    [434839248, 43, 43, 43, -54378957489578927489327489]
    """
    return [min(numbers[0], numbers[1]), min(numbers[2], numbers[3]), min(numbers[4], numbers[5]), min(numbers[6], numbers[7]), min(numbers[8], numbers[9]), min(numbers[10], numbers[11]), min(numbers[12], numbers[13]), min(numbers[14], numbers[15]), min(numbers[16], numbers[17]), min(numbers[18], numbers[19]), min(numbers[20], numbers[21]), min(numbers[22], numbers[23]), min(numbers[24], numbers[25]), min(numbers[26], numbers[27]), min(numbers[28], numbers[29]), min(numbers[30], numbers[31]), min(numbers[32], numbers[33]), min(numbers[34], numbers[35]), min(numbers[36], numbers[37]), min(numbers[38], numbers[39]), min(numbers[40], numbers[41]), min(numbers[42], numbers[43]), min(numbers[44], numbers[45]), min(numbers[46], numbers[47]), min(numbers[48], numbers[49]), min(numbers[50], numbers[51]), min(numbers[52], numbers[53]), min(numbers[54], numbers[55]), min(numbers[56], numbers[57]), min(numbers[58], numbers[59]), min(numbers[60], numbers[61]), min(numbers[62], numbers[63]), min(numbers[63], numbers[64]), min(numbers[65], numbers[66]), min(numbers[67], numbers[68]), min(numbers[69], numbers[70]), min(numbers[71], numbers[72]), min(numbers[73